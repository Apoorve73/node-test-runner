#!/usr/bin/env node

var processTitle = "elm-test"

process.title = processTitle;

var compile    = require("node-elm-compiler").compile,
  suffix       = require("../elm-io-ports.js"),
  fs           = require("fs-extra"),
  path         = require("path"),
  temp         = require("temp").track(), // Automatically cleans up temp files.
  util         = require("util"),
  _            = require("lodash"),
  spawn        = require("cross-spawn");

var elm = {
  'elm-package': 'elm-package'
};

if (process.argv[2] == "--help" || process.argv[2] == "-h") {
  console.log("Usage: elm-test init [--yes]  # Create example tests\n");
  console.log("Usage: elm-test TESTFILE [--compiler /path/to/compiler] # Run TESTFILE\n");
  console.log("Usage: elm-test [--compiler /path/to/compiler] # Run tests/TestRunner.elm\n");
  process.exit(1);
}

if (process.argv[2] == "--version") {
  console.log(require(path.join(__dirname, "..", "package.json")).version);
  process.exit(0);
}

if (process.argv[2] == "init") {
  var copyTemplate = function(templateName, destName) {
    if (arguments.length == 1) {
      destName = templateName;
    }
    var source = path.resolve(__dirname, "../templates/" + templateName);
    var destination = path.resolve("tests", destName);
    if (fs.existsSync(destination)) {
      console.log(destination + " already exists");
    } else {
      fs.copySync(source, destination);
      console.log("Created " + destination);
    }
  };

  var ensureDirectory = function(dirName) {
    var destination = path.resolve(".", dirName);
    if (fs.existsSync(destination)) {
      console.log(destination + " already exists");
    } else {
      fs.mkdirSync(destination);
      console.log("Created " + destination);
    }
  };

  var elmOptions = "";
  if (process.argv[3] == "--yes" || process.argv[3] == "-y") {
    elmOptions += " --yes";
  }

  ensureDirectory("src");
  ensureDirectory("tests");
  copyTemplate("elm-package.json");
  copyTemplate("TestRunner.elm");
  copyTemplate("Tests.elm");
  copyTemplate("gitignore", ".gitignore");
  process.exit(0);
}

var testFile = process.argv[2],
    cwd = __dirname,
    pathToMake = undefined;

function spawnCompiler(cmd, args, opts) {
  var compilerOpts = _.defaults({stdio: "inherit"}, opts);

  return spawn(cmd, args, compilerOpts);
}

if (typeof testFile == "undefined") {
  testFile = "tests/TestRunner.elm";
}

if (!fs.existsSync(testFile)) {
  console.error("Could not find file " + testFile);
  process.exit(1);
}

if (testFile.slice(0, 6) == "tests/") {
  process.chdir("./tests");
  testFile = testFile.slice(6);
}

if (process.argv[3] == "--compiler" || process.argv[3] == "-c") {
  pathToMake = process.argv[4];

  if (!pathToMake) {
    console.error("The --compiler option must be given a path to an elm-make executable.");
    process.exit(1);
  }
}

temp.open({ prefix:'elm_test_', suffix:'.js' }, function(err, info) {
  var dest = info.path;
  var compileProcess = compile( [testFile],
    {output: dest, spawn: spawnCompiler, pathToMake: pathToMake});

  compileProcess.on('close', function(exitCode) {
    if (exitCode !== 0) {
      process.exit(exitCode);
    }

    console.log("Successfully compiled", testFile);

    var runnerOpts = {stdio: ["pipe", "inherit", "inherit"]};
    var runnerProcess = spawn("node", [], runnerOpts);

    runnerProcess.on('exit', function (exitCode) {
      process.exit(exitCode);
    });

    var reader = fs.createReadStream(dest);

    reader.on("end", function() {
      runnerProcess.stdin.write(suffix);

      runnerProcess.stdin.end();
    })

    reader.pipe(runnerProcess.stdin);

    console.log("Running tests...");
  });
});
